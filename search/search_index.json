{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Python-Twitter\u2019s documentation!","text":"<p>A Python wrapper around for Twitter API V2  .</p>"},{"location":"#introduction","title":"Introduction","text":"<p>Twitter has published new version Twitter API V2 for developer at Aug 13, 2020.</p> <p>So this library provides a Python interface for this version API. Library work on Python 3.6+.</p> <p>Tips</p> <p>This library only has apis for v2, and does not contain api for v1.1</p>"},{"location":"#thanks","title":"Thanks","text":"<p>Inspired by Python-twitter, Thanks a lot.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"CHANGELOG/#092-2024-10-29","title":"0.9.2 (2024-10-29)","text":""},{"location":"CHANGELOG/#features","title":"Features","text":"<ul> <li>Add new apis for user block dm.</li> <li>Add new fields for user model</li> <li>update dependency.</li> </ul>"},{"location":"CHANGELOG/#091-2024-03-18","title":"0.9.1 (2024-03-18)","text":""},{"location":"CHANGELOG/#features_1","title":"Features","text":"<ul> <li>Add new apis for users search, trends.</li> <li>Add new fields for User object and Tweet object.</li> </ul>"},{"location":"CHANGELOG/#fix","title":"Fix","text":"<ul> <li>Fix oauth1.0 redirect url parameter.</li> </ul>"},{"location":"CHANGELOG/#090-2023-11-22","title":"0.9.0 (2023-11-22)","text":""},{"location":"CHANGELOG/#features_2","title":"Features","text":"<ul> <li>Add basic support for Media Upload V1.1</li> <li>Add new apis for get tweet retweets, usage tweets and so on</li> <li>Add new fields for some model.</li> </ul>"},{"location":"CHANGELOG/#fix_1","title":"Fix","text":"<ul> <li>Fix when create tweet with media</li> <li>Fix ratelimit for users by api.</li> </ul>"},{"location":"CHANGELOG/#081-2023-01-09","title":"0.8.1 (2023-01-09)","text":""},{"location":"CHANGELOG/#features_3","title":"Features","text":"<ul> <li>Add new fields for object update recently</li> </ul>"},{"location":"CHANGELOG/#080-2022-11-21","title":"0.8.0 (2022-11-21)","text":""},{"location":"CHANGELOG/#features_4","title":"Features","text":"<ul> <li>Add new fields for object update recently</li> <li>Add new apis for manage direct messages</li> </ul>"},{"location":"CHANGELOG/#079-2022-09-20","title":"0.7.9 (2022-09-20)","text":""},{"location":"CHANGELOG/#features_5","title":"Features","text":"<ul> <li>Improve streaming api</li> </ul>"},{"location":"CHANGELOG/#fix_2","title":"Fix","text":"<ul> <li>Fix set error token after generate access token.</li> </ul>"},{"location":"CHANGELOG/#078-2022-07-22","title":"0.7.8 (2022-07-22)","text":""},{"location":"CHANGELOG/#features_6","title":"Features","text":"<ul> <li>Support new query fields for get list tweets #117</li> </ul>"},{"location":"CHANGELOG/#077-2022-05-23","title":"0.7.7 (2022-05-23)","text":""},{"location":"CHANGELOG/#features_7","title":"Features","text":"<ul> <li>New apis for get user timelines by reverse chronological.</li> </ul>"},{"location":"CHANGELOG/#076-2022-04-07","title":"0.7.6 (2022-04-07)","text":""},{"location":"CHANGELOG/#features_8","title":"Features","text":"<ul> <li>New apis for bookmarks.</li> <li>New initial parameters <code>client secret</code> for <code>Confidential Clients</code>.</li> </ul>"},{"location":"CHANGELOG/#075-2022-02-17","title":"0.7.5 (2022-02-17)","text":""},{"location":"CHANGELOG/#features_9","title":"Features","text":"<ul> <li>New api for get tweet quote tweets. docs</li> <li>New update for spaces api. docs</li> </ul>"},{"location":"CHANGELOG/#074-2022-02-17","title":"0.7.4 (2022-02-17)","text":""},{"location":"CHANGELOG/#features_10","title":"Features","text":"<ul> <li>Add sort parameter for search tweets, docs</li> </ul>"},{"location":"CHANGELOG/#073-2022-01-24","title":"0.7.3 (2022-01-24)","text":""},{"location":"CHANGELOG/#features_11","title":"Features","text":"<ul> <li>Add parameters for pagination for tweet's liking users and retweets</li> <li>Add scripts for generate update text.</li> </ul>"},{"location":"CHANGELOG/#072-2021-12-15","title":"0.7.2 (2021-12-15)","text":""},{"location":"CHANGELOG/#features_12","title":"Features","text":"<ul> <li>Add api for get authorized user data</li> <li>Refactor code for OAuth1</li> </ul>"},{"location":"CHANGELOG/#071-2021-12-09","title":"0.7.1 (2021-12-09)","text":""},{"location":"CHANGELOG/#features_13","title":"Features","text":"<ul> <li>Add init parameters for oauth.</li> </ul>"},{"location":"CHANGELOG/#070-2021-11-23","title":"0.7.0 (2021-11-23)","text":""},{"location":"CHANGELOG/#features_14","title":"Features","text":"<ul> <li>More apis for lists.</li> </ul>"},{"location":"CHANGELOG/#fix_3","title":"Fix","text":"<ul> <li>Fix manage_rules params #94 By @erwanvivien.</li> </ul>"},{"location":"CHANGELOG/#061-2021-11-15","title":"0.6.1 (2021-11-15)","text":""},{"location":"CHANGELOG/#features_15","title":"Features","text":"<ul> <li>Tweet Manage #88</li> </ul>"},{"location":"CHANGELOG/#fix_4","title":"Fix","text":"<ul> <li>Fix ratelimt for some apis.</li> </ul>"},{"location":"CHANGELOG/#060-2021-10-23","title":"0.6.0 (2021-10-23)","text":""},{"location":"CHANGELOG/#features_16","title":"Features","text":"<ul> <li>API for lists manage #84</li> <li>Tests on python 3.10</li> </ul>"},{"location":"CHANGELOG/#050-2021-09-29","title":"0.5.0 (2021-09-29)","text":""},{"location":"CHANGELOG/#features_17","title":"Features","text":"<ul> <li>API for get user muting #82</li> <li>Beta OAuth2.0 auth flow #80 </li> <li>API for batch compliance #76</li> </ul>"},{"location":"CHANGELOG/#fix_5","title":"Fix","text":"<ul> <li>Fix rate limit </li> </ul>"},{"location":"CHANGELOG/#042-2021-08-21","title":"0.4.2 (2021-08-21)","text":""},{"location":"CHANGELOG/#features_18","title":"Features","text":"<ul> <li>API for new resource Space, lookup and search #71</li> </ul>"},{"location":"CHANGELOG/#fix_6","title":"Fix","text":"<ul> <li>Fix response data handler for streaming #70</li> </ul>"},{"location":"CHANGELOG/#035-2021-08-12","title":"0.3.5 (2021-08-12)","text":""},{"location":"CHANGELOG/#features_19","title":"Features","text":"<ul> <li>API for manage retweets #66</li> <li>New field <code>alt_text</code> for Media #68</li> </ul>"},{"location":"CHANGELOG/#034-2021-07-02","title":"0.3.4 (2021-07-02)","text":""},{"location":"CHANGELOG/#features_20","title":"Features","text":"<ul> <li>API for tweets counts #58</li> <li>New parameters for stream API #60</li> <li>API for mutes user #61</li> </ul>"},{"location":"CHANGELOG/#033-2021-05-24","title":"0.3.3 (2021-05-24)","text":""},{"location":"CHANGELOG/#features_21","title":"Features","text":"<ul> <li>API for get blocking users.  #52</li> <li>API for user liked tweets and tweet liking users.  #53</li> </ul>"},{"location":"CHANGELOG/#broken-changes","title":"Broken Changes","text":"<ul> <li>Refactor Ratelimit module.  #54</li> </ul>"},{"location":"CHANGELOG/#032-2021-05-10","title":"0.3.2 (2021-05-10)","text":""},{"location":"CHANGELOG/#features_22","title":"Features","text":"<ul> <li>Model update for tweet and media</li> </ul>"},{"location":"CHANGELOG/#031-2021-04-25","title":"0.3.1 (2021-04-25)","text":""},{"location":"CHANGELOG/#features_23","title":"Features","text":"<ul> <li>likes API</li> <li>keep uid with <code>auth_user_id</code></li> </ul>"},{"location":"CHANGELOG/#030-2021-04-08","title":"0.3.0 (2021-04-08)","text":""},{"location":"CHANGELOG/#features_24","title":"Features","text":"<ul> <li>Blocks API</li> <li>New Docs</li> </ul>"},{"location":"CHANGELOG/#020-2021-03-13","title":"0.2.0 (2021-03-13)","text":""},{"location":"CHANGELOG/#features_25","title":"Features","text":"<ul> <li>Stream API</li> </ul>"},{"location":"CHANGELOG/#010-2021-03-07","title":"0.1.0 (2021-03-07)","text":""},{"location":"CHANGELOG/#features_26","title":"Features","text":"<ul> <li>User Lookup</li> <li>User Follows</li> <li>Tweet Lookup</li> <li>Search Tweets</li> <li>Timelines</li> <li>Hide replies</li> </ul>"},{"location":"authorization/","title":"Authorization","text":"<p>Many endpoints currently use OAuth 1.0a method to act, or make API requests, on behalf of a Twitter account (but OAuth 2.0 with fine-grained scopes is preferred). For example, if you have a Twitter developer app, you can make API requests on behalf of any Twitter account as long as that user authenticates your app.</p> <p>So, This will show you how to obtain user access tokens through the 3-legged OAuth flow.</p>"},{"location":"authorization/#prerequisite","title":"Prerequisite","text":"<p>At the beginning, You need a Twitter app, and enable the <code>3-legged OAuth</code>.</p> <p>You can get more information at the official Documentation.</p> <p>If you're ready, now let's get started do a simple example with this library.</p>"},{"location":"authorization/#initial-api","title":"Initial Api","text":"<p>You need consumer key and secret to initial Api instance.</p> <pre><code>from pytwitter import Api\n\napi = Api(consumer_key='your consumer key', consumer_secret='your consumer secret', oauth_flow=True)\n</code></pre> <p>By default, The callback uri is <code>https://localhost/</code>, You need add this url to App's <code>Authentication settings</code>.</p>"},{"location":"authorization/#get-authorization-url","title":"Get authorization url","text":"<p>Now you can get the url for user to do authenticate,</p> <p><pre><code>api.get_authorize_url()\n# https://api.twitter.com/oauth/authorize?oauth_token=NPcudxy0yU5T3tBzho7iCotZ3cnetKwcTIRlX0iwRl0\n</code></pre> Upon successful authentication, your callback_url would receive a request containing the oauth_token and oauth_verifier parameters.</p> <p>Eg: https://localhost/?oauth_token=NPcudxy0yU5T3tBzho7iCotZ3cnetKwcTIRlX0iwRl0&amp;oauth_verifier=uw7NjWHT6OJ1MpJOXsHfNxoAhPKpgI8BlYDhxEjIBY</p>"},{"location":"authorization/#generate-access-token","title":"Generate access token","text":"<p>Once you have the redirect response for your callback url, you can get the user access token.</p> <pre><code>api.generate_access_token(response=\"You response url\")\n# {'oauth_token': 'oauth-token','oauth_token_secret': 'oauth-token-secret', 'user_id': 'user id', 'screen_name': 'screen name'}\n</code></pre> <p>For convenience, lib have keep the auth user id with property <code>auth_user_id</code>.</p> <p>Now the api instance will have the user authorization. You can use this to manage apis need user authorization like <code>hide reply</code>, <code>manage follow</code>... </p> <p>Note</p> <p>If you have any confusion, you need to read the Get user access token first.</p>"},{"location":"authorization_oauth2/","title":"Authorization OAuth2.0","text":""},{"location":"authorization_oauth2/#prerequisite","title":"Prerequisite","text":"<p>Once you have got the request access for <code>OAuth2.0</code>, your app will have the <code>Client ID</code> to do <code>authorization</code> for <code>OAuth2.0</code>.</p> <p>You can get more information at the documentation and the community content.</p> <p>If you're ready, now let's get started do a simple example with this library.</p>"},{"location":"authorization_oauth2/#initial-api","title":"Initial Api","text":"<p>You need <code>Client ID</code> to initial the Api instance.</p> <pre><code>from pytwitter import Api\napi = Api(client_id='your client id', oauth_flow=True)\n</code></pre> <p>Tips</p> <p>If your app is a <code>Confidential client</code>, you need also provide <code>Client Secret</code>. </p> <pre><code>from pytwitter import Api\napi = Api(client_id='your client id', client_secret=\"your client secret\", oauth_flow=True)\n</code></pre> <p>By default, The callback uri is <code>https://localhost/</code>, You need add this url to App's <code>Authentication settings</code>.</p>"},{"location":"authorization_oauth2/#get-authorization-url","title":"Get authorization url","text":"<p>You need save the <code>code_verifier</code> for generate access token. </p> <pre><code>authorization_url, code_verifier, state = api.get_oauth2_authorize_url()\n#('https://twitter.com/i/oauth2/authorize?response_type=code&amp;client_id=client_id&amp;redirect_uri=https%3A%2F%2Flocalhost%2F&amp;scope=users.read+tweet.read&amp;state=HVLpccax4G57jMJu1yddJtP55HYMQA&amp;code_challenge=jntz4xjHJ0XHzWA7_Wa6rrA8zHwu4qPZt2MQsv6&amp;code_challenge_method=S256',\n# '01wNLFIFeh310NpRLt837gcrvK1JqFrFvoYFU0DnH',\n# 'HVLpccax4G57jMJu1yddJtP55HYMQA')\n</code></pre> <p>Upon successful authentication, your callback_url would receive a request containing the <code>code</code> parameter.</p> <p>Eg: https://localhost/?state=HVLpccax4G57jMJu1yddJtP55HYMQA&amp;code=SUVocnRteEF0dFZCMXR0eWQ0aF9HX1ZZMkVmeHhlWTF4NmRMNElPdVNmQ2N4OjE2MzI4NDcode</p>"},{"location":"authorization_oauth2/#generate-access-token","title":"Generate access token","text":"<p>Once you have the redirect response for your callback url, you can get the user access token.</p> <pre><code>api.generate_oauth2_access_token(response=\"response\", code_verifier=\"code_verifier\")\n# {'token_type':'bearer','expires_in':7200,'access_token':'access_token','scope':'users.read tweet.read','expires_at':1632852223}\n</code></pre> <p>Now the api instance will have the user authorization. You can use this to manage apis needing user authorization.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#dependencies","title":"Dependencies","text":"<p>These distributions will be installed automatically when installing python-twitter-v2.</p> <ul> <li>Requests is an elegant and simple HTTP library for Python, built for human beings.</li> <li>Requests-OAuthlib uses the Python Requests and OAuthlib libraries to provide an easy-to-use Python interface for building OAuth1 and OAuth2 clients.</li> </ul>"},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#from-pypi","title":"From <code>Pypi</code>","text":"<pre><code>$ pip install python-twitter-v2\n</code></pre>"},{"location":"installation/#from-source","title":"From source","text":"<p>use <code>Poetry</code></p> <pre><code>$ git clone https://github.com/sns-sdks/python-twitter.git\n$ cd python-twitter\n$ make env\n$ poetry build\n</code></pre> <pre><code>make env\n</code></pre>"},{"location":"installation/#testing","title":"Testing","text":"<p>Test the code, Run:</p> <pre><code>make test\n</code></pre> <p>See the coverage information:</p> <pre><code>make cov-term\n</code></pre>"},{"location":"usage/preparation/","title":"Preparation","text":"<p>For now api, Twitter have different token, but we can classify them into two types:</p> <ul> <li>App Access Token</li> <li>User Access Token</li> </ul> <p>I assume that you have initialized two Api instances to get data from Twitter.</p> <p>one is variable <code>my_api</code>(instance with your user access token)</p> <p>Another is <code>api</code>(instance with app access token).</p> <p>Now let's go!</p>"},{"location":"usage/streaming/","title":"Steaming","text":"<p>Streaming endpoint delivers Tweet objects through a persistent HTTP GET connection.</p> <p>And now has two different api.</p> <p>For this library, provide <code>StreamApi</code> independent. Same as main <code>Api</code>, You need initial it first. You can see some <code>Examples</code> for it.</p> <pre><code>from pytwitter import StreamApi\nstream_api = StreamApi(bearer_token=\"bearer token\")\n# or use consumer key and secret\n# stream_api = StreamApi(consumer_key=\"consumer key\", consumer_secret=\"consumer secret\")\n</code></pre>"},{"location":"usage/streaming/#sampled-stream","title":"Sampled stream","text":"<p>The sampled stream endpoint delivers a roughly 1% random sample of publicly available Tweets in real-time.</p> <pre><code>stream_api.sample_stream()\n</code></pre>"},{"location":"usage/streaming/#filtered-stream","title":"Filtered stream","text":"<p>If you want filter the stream tweets, You need add rules for api.</p> <pre><code>np = {\n    \"add\": [\n        {\"value\": \"cat has:media\", \"tag\": \"cats with media\"},\n        {\"value\": \"cat has:media -grumpy\", \"tag\": \"happy cats with media\"}\n    ]\n}\nstream_api.manage_rules(rules=np, dry_run=True)\n# Response(data=[StreamRule(id='1370406958721732610', value='cat has:media -grumpy'), StreamRule(id='1370406958721732609', value='cat has:media')])\n</code></pre> <p>Then use api</p> <pre><code>stream_api.search_stream()\n</code></pre>"},{"location":"usage/compliance/batch_compliance/","title":"Batch compliance","text":"<p>These batch compliance endpoints allow you to upload large datasets of Tweet or user IDs to retrieve their compliance status in order to determine what data requires action in order to bring your datasets into compliance. Please note, use of the batch compliance endpoints is restricted to aforementioned use cases, and any other purpose is prohibited and may result in enforcement action.</p> <p>You can get more information at batch compliance docs.</p> <p>Typically, there are 4 steps involved in working with this endpoint:</p>"},{"location":"usage/compliance/batch_compliance/#create-a-compliance-job","title":"Create a compliance job","text":"<pre><code>api.create_compliance_job(job_type=\"users\", name=\"test-job\")\n# ComplianceJob(id='1430902035449143303', type='users', status='created')\n</code></pre>"},{"location":"usage/compliance/batch_compliance/#upload-your-dataset-to-the-upload_url","title":"Upload your dataset to the upload_url","text":"<p>Next, you upload your dataset as a plain text file to the provided upload_url, with each line of the file containing a single Tweet ID or user ID. The upload_url expires after 15 minutes.</p>"},{"location":"usage/compliance/batch_compliance/#check-the-job-status","title":"Check the job status","text":"<p>You can check the status of your compliance job to see whether it is created, in_progress, failed or complete.</p> <pre><code>api.get_compliance_job(\"1430902035449143303\")\n# Response(data=ComplianceJob(id='1430902035449143303', type='users', status='expired'))\n</code></pre>"},{"location":"usage/compliance/batch_compliance/#download-the-result","title":"Download the result","text":"<p>When your job is complete, you can download the results using the download_url. The download_url expires after one week (from when the job was created).</p>"},{"location":"usage/compliance/batch_compliance/#get-jobs-info","title":"Get jobs info","text":"<pre><code>api.get_compliance_jobs(job_type=\"users\")\n# Response(data=[ComplianceJob(id='1430902035449143303', type='users', status='expired'), ComplianceJob(id='1430919027786797056', type='users', status='created')])\n</code></pre>"},{"location":"usage/direct-messages/direct-messages-lookup/","title":"Direct Messages lookup","text":""},{"location":"usage/direct-messages/direct-messages-lookup/#direct-messages-lookup","title":"Direct Messages lookup","text":"<p>Direct Messages enable private conversations on Twitter. Direct Messages are one of the most popular features of Twitter, with a wide variety of use cases. These use cases range from group chats among friends to powering customer support for brands around the world. New v2 versions of Direct Messages endpoints will be introduced in stages, and this first stage includes fundamental endpoints for creating Direct Messages and listing Direct Message conversation events. For the first time, the Twitter API v2 supports group conversations.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/direct-messages/direct-messages-lookup/#get-all-messages-in-a-1-1-conversation","title":"Get all messages in a 1-1 conversation","text":"<p>Returns a list of Direct Messages (DM) events within a 1-1 conversation with the user specified in the participant_id path parameter.</p> <p>Messages are returned in reverse chronological order.</p> <pre><code>my_api.get_dm_events_by_participant(\"1334059193268011010\", max_results=1)\n# Response(data=[DirectMessageEvent(id='1593226322066567177', event_type='MessageCreate', text='from api to III')])\n</code></pre>"},{"location":"usage/direct-messages/direct-messages-lookup/#get-all-messages-in-a-specific-conversation-both-group-and-1-1-conversations","title":"Get all messages in a specific conversation (both group and 1-1 conversations)","text":"<p>Returns a list of Direct Messages within a conversation specified in the dm_conversation_id path parameter.</p> <p>Messages are returned in reverse chronological order.</p> <pre><code>my_api.get_dm_events_by_conversation(\"1593091374437781506\", max_results=1)\n# Response(data=[DirectMessageEvent(id='1593091374437781510', event_type='MessageCreate', text='New group by api')])\n</code></pre>"},{"location":"usage/direct-messages/direct-messages-lookup/#get-all-messages-across-a-users-dm-conversations-both-sent-and-received-group-and-1-1-conversations","title":"Get all messages across a user's DM conversations (both sent and received, group and 1-1 conversations)","text":"<p>Returns a list of Direct Messages for the authenticated user, both sent and received. Direct Message events are returned in reverse chronological order.</p> <p>Supports retrieving events from the previous 30 days.</p> <pre><code>my_api.get_dm_events(max_results=2)\n# Response(data=[DirectMessageEvent(id='1593226454237487108', event_type='MessageCreate', text='from api to III'), DirectMessageEvent(id='1593226322066567177', event_type='MessageCreate', text='from api to III')])\n</code></pre>"},{"location":"usage/direct-messages/manage-direct-messages/","title":"Manage Direct Messages","text":""},{"location":"usage/direct-messages/manage-direct-messages/#manage-direct-messages","title":"Manage Direct Messages","text":"<p>Direct Messages enable private conversations on Twitter. Direct Messages are one of the most popular features of Twitter, with a wide variety of use cases. These use cases range from group chats among friends, to powering customer support for brands around the world. New v2 versions of Direct Messages endpoints will be introduced in stages, and this first stage includes fundamental endpoints for creating Direct Messages and listing Direct Message conversation events. For the first time, the Twitter API v2 supports group conversations.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/direct-messages/manage-direct-messages/#create-a-message-in-a-1-1-conversation-with-the-participant","title":"Create a message in a 1-1 conversation with the participant","text":"<p>Creates a one-to-one Direct Message and adds it to the one-to-one conversation. </p> <p>This method either creates a new one-to-one conversation or retrieves the current conversation and adds the Direct Message to it.</p> <pre><code>my_api.create_message_to_participant(\"1334059193268011010\", text=\"dm by api\")\n# DirectMessageCreateResponse(dm_conversation_id='1301152652357595137-1334059193268011010', dm_event_id='1593234034146279428')\n</code></pre>"},{"location":"usage/direct-messages/manage-direct-messages/#create-a-group-conversation-and-add-a-dm-to-it","title":"Create a group conversation and add a DM to it","text":"<p>Creates a Direct Message on behalf of an authenticated user, and adds it to the specified conversation.</p> <pre><code>my_api.create_message_to_conversation(\"1593091374437781506\", text=\"message by api\")\n# DirectMessageCreateResponse(dm_conversation_id='1301152652357595137-1334059193268011010', dm_event_id='1593234034146279428')\n</code></pre>"},{"location":"usage/direct-messages/manage-direct-messages/#adding-a-dm-to-an-existing-conversation-for-both-group-and-1-1","title":"Adding a DM to an existing conversation (for both group and 1-1)","text":"<p>Creates a new group conversation and adds a Direct Message to it on behalf of an authenticated user.</p> <pre><code>my_api.create_conversation(\n    conversation_type=\"group\", \n    message={\"text\": \"hello\"}, \n    participant_ids=[\"1334059193268011010\", \"906948460078698496\"]\n)\n# DirectMessageCreateResponse(dm_conversation_id='1301152652357595137-1334059193268011010', dm_event_id='1593234034146279428')\n</code></pre>"},{"location":"usage/lists/list-follows/","title":"List follows","text":""},{"location":"usage/lists/list-follows/#list-follows-lookup","title":"List follows lookup","text":"<p>List follows lookup group has two available endpoints. You are able to retrieve details on followers of a specified List and get data on which Lists a user follows. These endpoints can be used to enable people to curate and organize Tweets based on what type of Lists other users are following.</p> <p>You can use either OAuth 1.0a User Context or OAuth 2.0 Bearer Token to authenticate to these endpoints.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/lists/list-follows/#get-lists-followers","title":"Get list's followers","text":"<p>Returns a list of users who are followers of the specified List.</p> <pre><code>api.get_list_followers(list_id=\"List ID\")\n# Response(data=[User(id='1301152652357595137', name='realllkk520', username='realllkk520')])\n</code></pre>"},{"location":"usage/lists/list-follows/#get-lists-for-user-followed","title":"Get lists for user followed.","text":"<p>Returns all Lists a specified user follows.</p> <pre><code>api.get_user_followed_lists(user_id=\"User ID\")\n# Response(data=[TwitterList(id='1403322685870940160', name='SNS-sdks'), TwitterList(id='1402926710174089222', name='\ud83e\uddd1\ud83c\udffb\\u200d\ud83d\udcbb Geeks')])\n</code></pre>"},{"location":"usage/lists/list-follows/#manage-list-follows","title":"Manage List follows","text":"<p>The manage List follows endpoints allow you to follow and unfollow a List on behalf of an authenticated user.</p> <p>For these endpoints, there are two methods available: POST and DELETE. The POST method allows you to follow a List, and the DELETE method allows you to delete a List.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/lists/list-follows/#follow-a-list","title":"Follow a list","text":"<pre><code>my_api.follow_list(user_id=my_api.auth_user_id, list_id=\"1448302476780871685\")\n# {'data': {'following': True}}\n</code></pre>"},{"location":"usage/lists/list-follows/#unfollow-a-list","title":"Unfollow a list","text":"<pre><code>my_api.unfollow_list(user_id=my_api.auth_user_id, list_id=\"1448302476780871685\")\n# {'data': {'following': False}}\n</code></pre>"},{"location":"usage/lists/list-lookup/","title":"List lookup","text":"<p>~~This List lookup group has two available endpoints. You are able to retrieve a specified List by ID and get details on user-owned Lists. With the Lists endpoints, you can build solutions that enable people to curate and organize Tweets based on preferences, interests, groups, or topics.</p> <p>You can use either OAuth 1.0a User Context or OAuth 2.0 Bearer Token to authenticate to these endpoints. If you choose to use OAuth 1.0a User Context, use the Access Tokens associated with a user that has authorized your App. You can generate Access Tokens using the 3-legged OAuth flow.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/lists/list-lookup/#lookup-a-specific-list-by-id","title":"Lookup a specific list by ID","text":"<p>Returns the details of a specified List.</p> <pre><code>api.get_list(list_id=\"1403322685870940160\")\n# Response(data=TwitterList(id='1403322685870940160', name='SNS-sdks'))\n</code></pre>"},{"location":"usage/lists/list-lookup/#lookup-a-users-owned-lists","title":"Lookup a user's owned Lists","text":"<p>Returns all Lists owned by the specified user.</p> <pre><code>api.get_user_owned_lists(user_id=\"User ID\")\n# Response(data=[TwitterList(id='1403322685870940160', name='SNS-sdks')])\n</code></pre>"},{"location":"usage/lists/list-members/","title":"List members","text":""},{"location":"usage/lists/list-members/#list-members-lookup","title":"List members lookup","text":"<p>Members lookup group has two available endpoints. You are able to retrieve details on members of a specified List and see which Lists a user is a member of. These endpoints can be used to enable people to curate and organize new Lists based on the membership information.</p> <p>You can use either OAuth 1.0a User Context or OAuth 2.0 Bearer Token to authenticate to these endpoints.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/lists/list-members/#get-lists-members","title":"Get list's members","text":"<p>Returns a list of users who are members of the specified List.</p> <pre><code>api.get_list_members(list_id=\"List ID\")\n# Response(data=[User(id='1301152652357595137', name='realllkk520', username='realllkk520')])\n</code></pre>"},{"location":"usage/lists/list-members/#get-lists-for-user-joined","title":"Get lists for user joined","text":"<p>Returns all Lists a specified user is a member of.</p> <pre><code>api.get_user_memberships_lists(user_id=\"User ID\")\n# Response(data=[TwitterList(id='1402926710174089222', name='\ud83e\uddd1\ud83c\udffb\\u200d\ud83d\udcbb Geeks'), TwitterList(id='1403322685870940160', name='SNS-sdks')])\n</code></pre>"},{"location":"usage/lists/list-members/#manage-list-members","title":"Manage List members","text":"<p>The manage List members endpoints allow you to add and remove members to a List on behalf of an authenticated user.</p> <p>For these endpoints, there are two methods available: POST and DELETE. The POST method allows you to add a member to a List, and the DELETE method allows you to remove a member from a List.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/lists/list-members/#add-member-to-a-list","title":"Add member to a list","text":"<p>Enables the authenticated user to add a member to a List they own.</p> <pre><code>my_api.add_list_member(list_id=\"1448302476780871685\", user_id=\"ID for user added to the list\")\n# {'data': {'is_member': True}}\n</code></pre>"},{"location":"usage/lists/list-members/#remove-member-from-a-list","title":"Remove member from a list","text":"<p>Enables the authenticated user to remove a member from a List they own.</p> <pre><code>my_api.remove_list_member(list_id=\"1448302476780871685\", user_id=\"ID for user will be removed from the list\")\n# {'data': {'is_member': False}}\n</code></pre>"},{"location":"usage/lists/list-tweets-lookup/","title":"List Tweets lookup","text":"<p>List Tweets lookup has one available endpoint to retrieve Tweets from a specified List. With this endpoint, you can build solutions that enable users to customize, organize and prioritize the Tweets they see in their timeline.</p> <p>You can use either OAuth 1.0a User Context or OAuth 2.0 Bearer Token to authenticate to these endpoints. If you choose to use OAuth 1.0a User Context, use the Access Tokens associated with a user that has authorized your App. You can generate Access Tokens using the 3-legged OAuth flow.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/lists/list-tweets-lookup/#lookup-tweets-from-a-specified-list","title":"Lookup Tweets from a specified List","text":"<p>Returns a list of Tweets from the specified List.</p> <pre><code>api.get_list_tweets(\"1403322685870940160\")\n# Response(data=[Tweet(id=1458088293904654340, text=Simple tweet from python-twitter-v2....), Tweet(id=1301154770489499650, text=Hey this is new begin.)])\n</code></pre>"},{"location":"usage/lists/manage-lists/","title":"Manage Lists","text":"<p>The manage List endpoints allow you to create, delete, and update Lists on behalf of an authenticated user. </p> <p>For these endpoints, there are three methods available: POST, DELETE and PUT. The POST method allows you to create a List, the DELETE method allows you to delete a List, and the PUT method allows you to update the metadata of a List.</p> <p>There is a user rate limit of 300 requests per 15 minutes for all three endpoints.</p> <p>You can get more information for this at docs</p> <p>Note that you can create up to 1000 Lists per account.</p>"},{"location":"usage/lists/manage-lists/#create-a-list","title":"Create a list","text":"<p>Enables the authenticated user to create a List.</p> <pre><code>my_api.create_list(name=\"pytwitter\")\n# TwitterList(id='1451603640167194629', name='pytwitter')\n</code></pre>"},{"location":"usage/lists/manage-lists/#update-a-list","title":"Update a list","text":"<p>Enables the authenticated user to update the meta data of a specified List that they own.</p> <pre><code>my_api.update_list(list_id=\"1448302476780871685\", name=\"lists for tw\")\n# {'updated': True}\n</code></pre>"},{"location":"usage/lists/manage-lists/#delete-a-list","title":"Delete a list","text":"<p>Enables the authenticated user to delete a List that they own.</p> <pre><code>my_api.delete_list(list_id=\"1448302476780871685\")\n# {'data': {'deleted': True}}\n</code></pre>"},{"location":"usage/lists/pinned-lists/","title":"Pinned Lists","text":""},{"location":"usage/lists/pinned-lists/#manage-pinned-lists","title":"Manage pinned Lists","text":"<p>The manage pinned List endpoints allow you to pin and unpin a List on behalf of an authenticated user.</p> <p>For these endpoints, there are two methods available: POST and DELETE. The POST method allows you to pin a List, and the DELETE method allows you to unpin a List.</p> <p>There is a user rate limit of 50 requests per 15 minutes for both endpoints.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/lists/pinned-lists/#pin-a-list","title":"Pin a list","text":"<p>Enables the authenticated user to pin a List.</p> <pre><code>my_api.pin_list(user_id=my_api.auth_user_id, list_id=\"ID for list to pin\")\n# {'data': {'pinned': True}}\n</code></pre>"},{"location":"usage/lists/pinned-lists/#unpin-a-list","title":"Unpin a list","text":"<p>Enables the authenticated user to unpin a List.</p> <pre><code>my_api.unpin_list(user_id=my_api.auth_user_id, list_id=\"ID for list to unpin\")\n# {'data': {'pinned': False}}\n</code></pre>"},{"location":"usage/lists/pinned-lists/#pinned-list-lookup","title":"Pinned List lookup","text":"<p>Pinned List lookup has one available endpoint that allows you to retrieve an authenticated user's pinned Lists. There is a rate limit of 15 requests per 15 minutes for this endpoint.</p> <p>Since you are making requests on behalf of a user with all pinned List endpoints, you must authenticate with OAuth 1.0a User Context and use the Access Tokens associated with a user that has authorized your App.  You can generate Access Tokens using the 3-legged OAuth flow.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/lists/pinned-lists/#get-user-pinned-lists","title":"Get user pinned lists","text":"<p>Returns the Lists pinned by a specified user.</p> <pre><code>my_api.get_user_pinned_lists(user_id=my_api.auth_user_id)\n# Response(data=[TwitterList(id='1403322685870940160', name='SNS-sdks')])\n</code></pre>"},{"location":"usage/media-upload/chunked-upload/","title":"Chunked Upload","text":"<p>Chunked upload is the recommended method for uploading media files. It allows you to upload media files up to 512MB. The chunked upload endpoint can be used to upload both images and videos. </p> <p>You can get more information for this at docs.</p> <p>follow the steps below to upload a video by chunked upload:</p>"},{"location":"usage/media-upload/chunked-upload/#step-1-initialize-the-upload","title":"Step 1: Initialize the upload","text":"<pre><code>resp = my_api.upload_media_chunked_init(\n    total_bytes=1234561,\n    media_type=\"video/mp4\",\n)\nmedia_id = resp.media_id_string\n</code></pre>"},{"location":"usage/media-upload/chunked-upload/#step-2-append-the-file","title":"Step 2: Append the file","text":"<p>Assume the file has split into 3 parts</p> <pre><code>video_parts = [\n    \"path/to/video/part1.mp4\",\n    \"path/to/video/part2.mp4\",\n    \"path/to/video/part3.mp4\",\n]\n\nfor idx, part in enumerate(video_parts):\n    with open(part, \"rb\") as media:\n        status = my_api.upload_media_chunked_append(\n            media_id=media_id,\n            media=media,\n            segment_index=idx,\n        )\n        print(status)\n</code></pre>"},{"location":"usage/media-upload/chunked-upload/#step-3-finalize-the-upload","title":"Step 3: Finalize the upload","text":"<p>Once you have appended all the file parts, you need to finalize the upload.</p> <pre><code>resp = my_api.upload_media_chunked_finalize(media_id=media_id)\nprint(resp)\n</code></pre>"},{"location":"usage/media-upload/chunked-upload/#step-4-optional-check-the-status","title":"Step 4 (Optional): Check the status","text":"<p>If the finalize response show the video is processing, you can check the status by using the following code:</p> <pre><code>resp = my_api.upload_media_chunked_status(media_id=media_id)\nprint(resp)\n</code></pre> <p>Note, only the media is in processing status, you can get the status.</p>"},{"location":"usage/media-upload/chunked-upload/#step-5-create-a-tweet-with-video","title":"Step 5: Create a tweet with video","text":"<p>Once the processing is complete, you can use the <code>media_id</code> to create a tweet with video.</p> <pre><code>my_api.create_tweet(\n    text=\"Hello World\",\n    media_media_ids=[media_id],\n)\n</code></pre> <p>Enjoy it!</p>"},{"location":"usage/media-upload/simple-upload/","title":"Simple Upload","text":"<p>The simple upload endpoint can only be used to upload images(gifs).</p> <p>You can get more information for this at docs</p> <p>follow the steps below to upload an image:</p> <pre><code>with open(\"path/to/image\", \"rb\") as media:\n    resp = my_api.upload_media_simple(media=media)\n    print(resp)\n</code></pre> <p>also you can upload with base64 encoded image:</p> <pre><code>import base64\n\nwith open(\"path/to/image\", \"rb\") as f:\n    media_data = base64.b64encode(f.read()).decode(\"utf-8\")\n    resp = my_api.upload_media_simple(media_data=media_data)\n    print(resp)\n</code></pre>"},{"location":"usage/media-upload-v2/chunked-upload/","title":"Chunked Upload","text":"<p>This guide will help you make your first requests to upload media using the X API v2 media upload endpoint(s).</p> <p>You can get more information for this at docs</p> <p>For video or chunked uploads, you must:</p> <ol> <li>Initialize the upload using the <code>INIT</code> command</li> <li>Upload each chunk of bytes using the <code>APPEND</code> command</li> <li>Complete the upload using the <code>FINALIZE</code> command</li> </ol> <p>let's do it, Now we need to upload a big video with a filename <code>/path/to/video.mp4</code></p>"},{"location":"usage/media-upload-v2/chunked-upload/#step-1-initialize-the-upload","title":"Step 1: Initialize the upload","text":"<p>As first step, you need to initialize the upload.</p> <pre><code>import os\n\nfilename = \"/path/to/video.mp4\"\n\ninit_resp = myapi.upload_media_chunked_init_v2(\n    total_bytes=os.path.getsize(filename),\n    media_type=\"video/mp4\",\n    media_category=\"tweet_video\",\n)\nprint(init_resp)\n# Response(data=MediaUpload(id='1912334964932374529', media_key='7_1912334964932374529', processing_info=None, image=None, video=None))\n</code></pre>"},{"location":"usage/media-upload-v2/chunked-upload/#step-2-append-the-file-by-chunks","title":"Step 2: Append the file by chunks","text":"<p>Once we have the media identifiers <code>id</code> from the <code>init_resp</code>, we can start uploading the file by chunks.</p> <pre><code>media_id = init_resp.data.id\n\nchunk_size = 2 * 1024 * 1024\nsegment_index = 0\nwith open(filename, \"rb\") as f:\n    while True:\n        chunk = f.read(chunk_size)\n        if not chunk:\n            break\n\n        chunk_resp = myapi.upload_media_chunked_append_v2(\n            media_id=media_id,\n            media=chunk,\n            segment_index=segment_index,\n        )\n        print(chunk_resp)\n        segment_index += 1\n\n# True\n</code></pre>"},{"location":"usage/media-upload-v2/chunked-upload/#step-3-finalize-the-upload","title":"Step 3: Finalize the upload","text":"<p>Everything is ok, we need finalize the upload.</p> <pre><code>finalize_resp = myapi.upload_media_chunked_finalize_v2(media_id=media_id)\nprint(finalize_resp)\n# Response(data=MediaUpload(id='1912090619981471744', media_key='7_1912090619981471744', processing_info=MediaUploadResponseProcessingInfo(state='succeeded', check_after_secs=None, progress_percent=None, error=None), image=None, video=None)) \n</code></pre>"},{"location":"usage/media-upload-v2/chunked-upload/#step-4-optional-check-the-processing-status","title":"Step 4 (Optional): Check the processing status","text":"<p>Once you have finalized the upload, you can check the processing status.</p> <pre><code>status_resp = myapi.upload_media_chunked_status_v2(media_id=media_id)\nprint(status_resp)\n# Response(data=MediaUpload(id='1912090619981471744', media_key='7_1912090619981471744', processing_info=MediaUploadResponseProcessingInfo(state='succeeded', check_after_secs=None, progress_percent=100, error=None), image=None, video=None))\n</code></pre>"},{"location":"usage/media-upload-v2/chunked-upload/#step-5-create-tweet-with-media","title":"Step 5: Create tweet with media","text":"<p>Congratulations, you have uploaded a video using the X API v2 media upload endpoint(s).</p> <p>Now we can create a tweet with this video.</p> <pre><code>tweet_resp = myapi.create_tweet(text=\"My first tweet with a video\", media_media_ids=[media_id])\n\n# Tweet(id=1912338879258194343, text=My first tweet with a video...)\n</code></pre> <p>Enjoy it!</p>"},{"location":"usage/media-upload-v2/simple-upload/","title":"Simple Upload","text":"<p>You can use media upload endpoint to upload simple media, images(gifs).</p> <p>You can get more information for this at docs</p>"},{"location":"usage/media-upload-v2/simple-upload/#upload-simple","title":"upload simple","text":"<pre><code>with open(\"path/to/image\", \"rb\") as media:\n    resp = my_api.upload_media_simple_v2(media=media)\n    print(resp)\n</code></pre>"},{"location":"usage/spaces/search/","title":"Search Spaces","text":"<p>This endpoint allows you to search Spaces by their title, and to filter results by status. This endpoint is useful to discover live or upcoming Spaces based on keywords, mentioned users or hashtags in their title.</p> <p>The endpoint accepts one or more keywords as a query. Its results can be filtered by the status of a Space (live or scheduled). By default, a request will return both live and scheduled Spaces that match the specified query.</p> <p>You can get more information at search docs.</p>"},{"location":"usage/spaces/search/#search-spaces","title":"Search spaces","text":"<pre><code>api.search_spaces(query=\"hello\", state=\"live\")\n# Response(data=[Space(id='1yoKMAybPkjKQ', state='live')])\n</code></pre>"},{"location":"usage/spaces/spaces-lookup/","title":"Spaces Lookup","text":"<p>The Spaces lookup endpoints help you lookup live or scheduled Spaces, and enable you to build discovery experiences to give your users ways to find Spaces they may be interested in. You can get more information at Lookup docs.</p> <p>There have multiple methods for get spaces data by api.</p>"},{"location":"usage/spaces/spaces-lookup/#get-space-by-space-id","title":"Get space by space ID","text":"<pre><code>api.get_space(space_id=\"1DXxyRYNejbKM\")\n# Response(data=[Space(id='1DXxyRYNejbKM', state='live')])\n</code></pre>"},{"location":"usage/spaces/spaces-lookup/#get-spaces-by-multi-spaces-ids","title":"Get spaces by multi spaces IDs","text":"<pre><code>api.get_spaces(space_ids=[\"1DXxyRYNejbKM\", \"1nAJELYEEPvGL\"])\n# Response(data=[Space(id='1DXxyRYNejbKM', state='live'), Space(id='1nAJELYEEPvGL', state='live')])\n</code></pre>"},{"location":"usage/spaces/spaces-lookup/#get-spaces-by-multi-creator-ids","title":"Get spaces by multi creator IDs","text":"<pre><code>api.get_spaces_by_creator(creator_ids=[\"2244994945\", \"6253282\"])\n# Response(data=[Space(id='1DXxyRYNejbKM', state='live'), Space(id='1nAJELYEEPvGL', state='live')])\n</code></pre>"},{"location":"usage/spaces/spaces-lookup/#get-space-buyers-by-space-id","title":"Get space buyers by space ID","text":"<pre><code>api.get_buyers_by_space(space_id=\"1DXxyRYNejbKM\")\n# Response(data=[User(id='2244994945', name='Twitter Dev', username='TwitterDev'), User(id='783214', name='Twitter', username='Twitter')])\n</code></pre>"},{"location":"usage/spaces/spaces-lookup/#get-space-tweets-by-space-id","title":"Get space tweets by space ID","text":"<pre><code>api.get_tweets_by_space(space_id=\"1DXxyRYNejbKM\")\n# Response(data=[Tweet(id=1389270063807598594, text=now, everyone with 600 or more followers can...), Tweet(id=1354143047324299264, text=Academics are one of the biggest groups using...), Tweet(id=1293595870563381249, text=Twitter API v2: Early Access releasednnToday we...)])\n</code></pre>"},{"location":"usage/trends/trends/","title":"Trends","text":"<p>The Trends lookup endpoint allow developers to get the Trends for a location, specified using the where-on-earth id (WOEID).</p> <p>Note: WOEID is a legacy identifier created by Yahoo and has been deprecated. X API uses the numeric value to identify town and country trend locations.  Reference our legacy blog post, or archived data</p>"},{"location":"usage/trends/trends/#get-trends","title":"Get trends","text":"<p>Get the trends for a location</p> <pre><code>api.get_trends_by_woeid(woeid=1)\n# Response(data=[Trend(trend_name='#QuietOnSet', tweet_count=14060), Trend(trend_name='King Charles', tweet_count=42315), Trend(trend_name='Drake Bell', tweet_count=1234)])\n</code></pre>"},{"location":"usage/tweets/bookmarks/","title":"Bookmarks","text":"<p>Bookmarks are a core feature of the Twitter app that allows you to \u201csave\u201d Tweets and easily access them later. With these endpoints, you can retrieve, create, delete or build solutions to manage your Bookmarks via the API.  </p> <p>You can get more information for this at docs</p>"},{"location":"usage/tweets/bookmarks/#manage-bookmarks","title":"Manage Bookmarks","text":""},{"location":"usage/tweets/bookmarks/#bookmark-tweet","title":"Bookmark tweet","text":"<p>Causes the user ID of an authenticated user identified in the path parameter to Bookmark the target Tweet provided in the request body.</p> <pre><code>my_api.bookmark_tweet(user_id=\"1301152652357595137\", tweet_id=\"1511645952418885636\")\n# {'data': {'bookmarked': True}}\n</code></pre>"},{"location":"usage/tweets/bookmarks/#remove-bookmark-tweet","title":"Remove bookmark tweet","text":"<p>Allows a user or authenticated user ID to remove a Bookmark of a Tweet.</p> <pre><code>my_api.bookmark_tweet_remove(user_id=\"1301152652357595137\", tweet_id=\"1511645952418885636\")\n# {'data': {'bookmarked': False}}\n</code></pre>"},{"location":"usage/tweets/bookmarks/#bookmarks-lookup","title":"Bookmarks lookup","text":"<p>Allows you to get information about a authenticated user\u2019s 800 most recent bookmarked Tweets.</p> <pre><code>my_api.get_bookmark_tweets(user_id=\"1301152652357595137\")\n#  Response(data=[Tweet(id=1511645952418885636, text=https://t.co/Hl9Sa0uP9W)])\n</code></pre>"},{"location":"usage/tweets/hide_reply/","title":"Hide replies","text":"<p>This endpoint gives you the ability to programmatically hide or unhide replies using criteria you define.</p> <p>hide reply</p> <pre><code>my_api.hidden_reply(tweet_id=\"tweet id\")\n# {\"data\":{\"hidden\":true}}\n</code></pre> <p>un-hide reply</p> <pre><code>my_api.hidden_reply(tweet_id=\"tweet id\", hidden=False)\n# {\"data\":{\"hidden\":false}}\n</code></pre>"},{"location":"usage/tweets/likes/","title":"Likes","text":"<p>The manage Likes endpoints enable you to like or unlike a specified Tweet on behalf of an authenticated account. </p> <p>For this endpoint group, there are two methods available POST and DELETE. The POST method allows you to like a Tweet, and the DELETE method will enable you to unlike a Tweet.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/tweets/likes/#likes","title":"likes","text":"<p>You can like a tweet</p> <pre><code>my_api.like_tweet(user_id=my_api.auth_user_id, tweet_id=\"target tweet id\")\n# {'data': {'liked': True}}\n</code></pre> <p>Unlike a tweet</p> <pre><code>my_api.unlike_tweet(user_id=my_api.auth_user_id, tweet_id=\"target tweet id\")\n# {'data': {'liked': False}}\n</code></pre>"},{"location":"usage/tweets/likes/#liking-users","title":"Liking users","text":"<p>You can get users who are liking the tweet</p> <pre><code>api.get_tweet_liking_users(tweet_id=\"1395803619614679041\")\n</code></pre>"},{"location":"usage/tweets/likes/#liked-tweets","title":"liked tweets","text":"<p>You can get tweets which are liking by you.</p> <pre><code>api.get_user_liked_tweets(user_id=my_api.auth_user_id)\n</code></pre>"},{"location":"usage/tweets/qutoe_tweets/","title":"Quote Tweets","text":"<p>The Quote Tweets lookup endpoint gives the Quote Tweets for a given Tweet ID.  This allows developers that build apps and clients to get the Quote Tweets for a Tweet quickly and efficiently. It also makes it easy for researchers to study the full conversation around a Tweet including all its Quote Tweets.</p> <p>Tweets are delivered in reverse-chronological order, starting with the most recent. Results are paginated up to 100 Tweets per page (10 Tweets by default). Pagination tokens are provided for paging through large sets of Tweets.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/tweets/qutoe_tweets/#quote-tweets","title":"Quote Tweets","text":"<pre><code>api.get_tweet_quote_tweets(tweet_id=\"1409931481552543749\", max_results=10)\n# Response(data=[Tweet(id=1503982413004914689, text=RT @suhemparack: Super excited to share our...), Tweet(id=1495979553889697792, text=RT @chris_bail: Twitter has created an entire...), Tweet(id=1486385372401737728, text=RT @suhemparack: Super excited to share our...), Tweet(id=1480954678447857669, text=RT @suhemparack: Super excited to share our...), Tweet(id=1480639272721940486, text=RT @suhemparack: Super excited to share our...), Tweet(id=1471614967207976961, text=RT @chris_bail: Twitter has created an entire...), Tweet(id=1470423243513372679, text=RT @suhemparack: Super excited to share our...), Tweet(id=1469125403373568001, text=RT @suhemparack: Super excited to share our...), Tweet(id=1468633446935318529, text=RT @suhemparack: Super excited to share our...), Tweet(id=1438256410417143809, text=RT @suhemparack: Super excited to share our...)])\n</code></pre>"},{"location":"usage/tweets/retweet/","title":"Retweets","text":"<p>The manage Retweets endpoints enable you to Retweet or undo a Retweet of a specified Tweet on behalf of an authenticated account.</p> <p>For this endpoint group, there are two methods available POST and DELETE. The POST method allows you to Retweet a Tweet, and the DELETE method will enable you to undo a Retweet of a given Tweet.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/tweets/retweet/#retweets","title":"Retweets","text":"<p>Retweet a tweet</p> <pre><code>my_api.retweet_tweet(user_id=my_api.auth_user_id, tweet_id=\"target tweet id\")\n# {'data': {'retweeted': True}}\n</code></pre> <p>Remove retweet from a tweet</p> <pre><code>my_api.remove_retweet_tweet(user_id=my_api.auth_user_id, tweet_id=\"target tweet id\")\n# {'data': {'retweeted': False}}\n</code></pre>"},{"location":"usage/tweets/retweet/#tweet-retweeted-users","title":"Tweet retweeted users","text":"<pre><code>api.get_tweet_retweeted_users(tweet_id=\"target tweet id\")\n# Response(data=[User(id='1301152652357595137', name='realllkk520', username='realllkk520')])\n</code></pre>"},{"location":"usage/tweets/retweet/#tweet-retweeted-tweets","title":"Tweet retweeted tweets","text":"<pre><code>api.get_tweet_retweeted_tweets(tweet_id=\"target tweet id\")\n# Response(data=[Tweet(id=1724975633908789418, text=RT @XDevelopers: You can now monitor your usage...), Tweet(id=1724805194280730931, text=RT @XDevelopers: You can now monitor your usage...)]) \n</code></pre>"},{"location":"usage/tweets/search_tweets/","title":"Search Tweets","text":"<p>The recent and full-archive search REST endpoints are part of the Search Tweets group of endpoints, meaning they share a common design and features.</p> <p>Search by recent tweets</p> <pre><code>api.search_tweets(query=\"python\")\n# Response(data=[Tweet(id=1364512148865564675, text=RT @jesss_codes: Your resume: Git SSL Vue CSS...), Tweet(id=1364512106385702914, text=RT @theweeflea: Sturgeon goes on TV to declare...), Tweet(id=1364512102606467074, text=RT @tkEzaki:...), Tweet(id=1364512092343070721, text=RT @ore57436902: #Python #pyxel #\u30c9\u30eb\u30a2\u30fc\u30ac\u306e\u5854...), Tweet(id=1364512076601856007, text=RT @shosen_bt_pc:...), Tweet(id=1364512071866605568, text=RT @CatherineAdenle: 6 ways learning coding can...), Tweet(id=1364512071614889987, text=RT @giswqs: #geemap v0.8.11 has been released....), Tweet(id=1364512066770509824, text=RT @Akpanannang: Today when coming out from the...), Tweet(id=1364512053252284419, text=RT @HarbRimah: New Off-the-Shelf (OTS) Datasets...), Tweet(id=1364512030800171011, text=RT @gzadkowski: Day 5 - #100DaysOfCode...)])\n</code></pre> <p>Search by full-archive tweets, this api is <code>Academic Research product track only</code>.</p> <pre><code>api.search_tweets(query=\"python\", query_type=\"all\")\n# Response(data=[Tweet(id=1364512148865564675, text=RT @jesss_codes: Your resume: Git SSL Vue CSS...), Tweet(id=1364512106385702914, text=RT @theweeflea: Sturgeon goes on TV to declare...), Tweet(id=1364512102606467074, text=RT @tkEzaki:...), Tweet(id=1364512092343070721, text=RT @ore57436902: #Python #pyxel #\u30c9\u30eb\u30a2\u30fc\u30ac\u306e\u5854...), Tweet(id=1364512076601856007, text=RT @shosen_bt_pc:...), Tweet(id=1364512071866605568, text=RT @CatherineAdenle: 6 ways learning coding can...), Tweet(id=1364512071614889987, text=RT @giswqs: #geemap v0.8.11 has been released....), Tweet(id=1364512066770509824, text=RT @Akpanannang: Today when coming out from the...), Tweet(id=1364512053252284419, text=RT @HarbRimah: New Off-the-Shelf (OTS) Datasets...), Tweet(id=1364512030800171011, text=RT @gzadkowski: Day 5 - #100DaysOfCode...)])\n</code></pre>"},{"location":"usage/tweets/timelines/","title":"Timelines","text":"<p>The user Tweet timeline endpoints provides access to Tweets published by a specific Twitter account.</p> <p>Each timeline endpoints may use the following parameters to filter out the timeline. Use these parameters to create a more specified timeline catered to your needs:</p> <ul> <li>user_id: [String] User ID for the target user</li> <li>start_time: [String] Earliest UTC timestamp for tweets, formatted as YYYY-MM-DDTHHssZ.</li> <li>end_time: [String] Most Recent UTC timestamp for tweets, formatted as YYYY-MM-DDTHHssZ.</li> <li>since_id: [String] Filter out tweets older than the \"Since\" tweet id</li> <li>until_id: [String] Filter out tweets more recent than the \"Until\" tweet id</li> <li>max_results: [Integer] Maximum number of tweets to be returned (Must be between 5 and 100)</li> <li>pagination_token: [String]</li> <li>tweet_fields: [Array] Specific information requested for the tweets. The response would include the additional information about each tweet. You simply have to list out the sub-parameters.<ul> <li>id: The unique Tweet ID</li> <li>text: The actual UTF-8 text for the tweets</li> <li>edit_history_tweet_ids: Array of unique IDs indicating all verions of tweet (initial version to most recent verison)</li> <li>attachments: Specifies type of attachments present (Poll, Image, etc) in the tweet </li> <li>author_id: User ID of tweet's author</li> <li>context_annotations: Contains context annations for the tweet</li> <li>conversation_id: Tweet ID of the original Tweet of the conversation (which includes replies, etc.)</li> <li>created_at: Creation time of the tweet</li> <li>edit_controls: Indiciates how much longer the Tweet can be edited, and the number of remaining edits</li> <li>entities: Provides additional information about hashtags, urls, user mentions, and cashtags associated with tweet</li> <li>in_reply_to_user_id: If the tweet is a reply, the field will contain the original Tweet's author ID</li> <li>lang: Language of the tweet, if detected. Returned as BCP47 language tag</li> <li>non_public_metrics: Non-public engagement metrics such as impression couunts, URL link clicks, User Profile Clicks</li> <li>organic_metrics: Engagement metrics at time of request, such as like count, reply count, etc.</li> <li>possible_senstive: Indicates if the tweet's content may be senstive</li> <li>promoted_metrics: Engagement metrics in a promoted context (when Tweet is promoted)</li> <li>public_metrics: Public engagement metric such as reply count, like count at time of request</li> <li>referenced_tweets: List of Tweets that this tweet refers to whether it be a retweet, quoted tweet, etc.</li> <li>reply_settings: Shows who can reply to the tweet (Everyone, mentioned users, followers)</li> <li>withheld: Shows information for withheld content</li> </ul> </li> <li>exclude: [Array] Fields for what type of twets to exclude from response</li> <li>expansions: [Array] Fields for the expansion</li> <li>user_fields: [Array] Specific information requested for the requested user. The response would include the additional information about each user. You simply have to list out the sub-parameters.<ul> <li>id: User ID</li> <li>name: Name of the user as shown on profile. Capped to 50 characters</li> <li>username: User unique screen handle</li> <li>connection_status: Get List of relations between user and user being looked up (Follow Request Received, Following, Muting, etc.)</li> <li>created_at: UTC datetime that the user account was created</li> <li>description: Text of the user's description/bio if provided</li> <li>entities: Additional information about hashtags, urls, user mentions, and cashtags associated</li> <li>location: Locations pecificed in user's profile if provided</li> <li>pinned_tweet_id: Unique Tweet ID of user's pinned Tweet</li> <li>profile_image_url: URL of the profile image for the user</li> <li>protected: Indicates if the user's tweets are private</li> <li>public_metrics: Contains information about user acitvity such as follower count, following count, tweet count, etc.</li> <li>url: URL specified in user's profile, if present</li> <li>verified: Indicates if user is a verified Twitter user</li> <li>withheld: Contains withholding details for withheld content, if applicable</li> </ul> </li> <li>media_fields: [Array] Specific information requested for the requested media. The response would include the additional information about each media object. You simply have to list out the sub-parameters.<ul> <li>media_key: Unique ID for expanded media content</li> <li>type: Type of content (animated gif, photo, videeo)</li> <li>url: Direct URL to the media file on Twitter</li> <li>duration_ms: Duration of media content if it's a video</li> <li>height: Height of media content in pixels</li> <li>non_public_metrics: Non-public engagement metrics for media content at time of request (playback count, etc.)</li> <li>organic_metrics: Engagement metrics for media content, similar to non public metrics</li> <li>preview_image_url: URL to the static placeholder preview of media content</li> <li>promoted_metrics: Engagement metrics for media content that has been promoted</li> <li>public_metrics: Public engagement metrics for the media content</li> <li>width: Width of media content in pixels</li> <li>alt_text: Description of image to enable and support accessibility. Up to 1000 characters long</li> <li>variants: Each media object may have multiple display or playback variants, with different resolutions or formats</li> </ul> </li> <li>place_fields: [Array] Specific information requested for the places tagged in tweets. The response would include the additional information about each place. You simply have to list out the sub-parameters.<ul> <li>full_name: Longer-form detailed place name</li> <li>id: Unique ID of expanded place </li> <li>contained_within: Returns IDs of known places contianing referenced place</li> <li>country: Full-length name of the coutunry the place belongs to</li> <li>country_code: ISO Alpha-2 couutnry code the place belongs to</li> <li>geo: Contains place details in GeoJSON format</li> <li>name: Short name for the place</li> <li>place_type: Type of place: city, town, etc.</li> </ul> </li> <li>poll_fields: [Array] Specific information requested for the requested poll in tweeets. The response would include the additional information about each poll object. You simply have to list out the sub-parameters.<ul> <li>id: Unique ID of expanded poll</li> <li>options: Objects describing each choice in the poll</li> <li>duration_minutes: Total duration of the poll </li> <li>end_datetime: End date adn tiemf or poll in ISO-8601 format</li> <li>voting_status: Indicates if the poll is still activie and can receive votes, or if the voting is now closed</li> </ul> </li> <li>return_json: [Boolean] Type for returned data</li> </ul>"},{"location":"usage/tweets/timelines/#user-tweet-timeline","title":"User Tweet timeline","text":"<p>The user Tweet timeline endpoint provides access to Tweets published by a specific Twitter account.</p> <pre><code>api.get_timelines(user_id=\"2244994945\")\n# Response(data=[Tweet(id=1364275610764201984, text=If you're newly approved for the Academic...), Tweet(id=1362876655061073928, text=From our living rooms to yours \ud83d\udc31\u200d\ud83d\udcbb\ud83d\udecb\ufe0fOur...), Tweet(id=1362439338978467841, text=\u201cTo quote my creator Jerome Gangneux, I always...), Tweet(id=1362439338169016324, text=\u201cIn the 20th century, managers managed humans,...), Tweet(id=1362439336910675970, text=Meet one of the useful Twitter bots out there:...), Tweet(id=1359912509940011010, text=Valentine\u2019s Day is approaching! \ud83d\udc99 Over the...), Tweet(id=1359554366051504129, text=Go ahead, follow another puppy account. We...), Tweet(id=1357371424487268354, text=Learn how academics can get historical Tweets...), Tweet(id=1356991771553583106, text=Who knew an API could be delicious?...), Tweet(id=1354215875998437376, text=RT @TwitterOSS: Today we\u2019re happy to share...)])\n</code></pre>"},{"location":"usage/tweets/timelines/#reverse-chronological-home-timeline","title":"Reverse chronological home timeline","text":"<p>This endpoint enables you to retrieve the most recent Tweets, Retweets, and replies posted by the authenticated user and the accounts they follow. </p> <pre><code>my_api.get_timelines_reverse_chronological(user_id=\"2244994945\")\n# Response(data=[Tweet(id=1524796546306478083, text=Today marks the launch of Devs in the Details...), Tweet(id=1524468552404668416, text=\ud83d\udce2 Join @jessicagarson @alanbenlee and @i_am_daniele tomorrow...))\n</code></pre>"},{"location":"usage/tweets/timelines/#user-mention-timeline","title":"User mention timeline","text":"<p>The user mention timeline endpoint allows you to request Tweets mentioning a specific Twitter user.</p> <pre><code>api.get_mentions(user_id=\"2244994945\")\n# Response(data=[Tweet(id=1364407587207213056, text=@scottmathson @TwitterDev What would you want...), Tweet(id=1364398068313903104, text=@Twitter should consider supporting...), Tweet(id=1364377794327633925, text=@sugan2424 @TwitterDev @threadreaderapp You...), Tweet(id=1364377404156772352, text=@TwitterDev What kind of tweet / attachment is...), Tweet(id=1364373969852366849, text=\u2022 Thirdly, that @Twitter, @Twittersafety,...), Tweet(id=1364367885582352386, text=@Twitter @TwitterSafety @TwitterDev @jack...), Tweet(id=1364366114998870016, text=I have mixed feelings about @Twitter /...), Tweet(id=1364364744916951040, text=@Casanovacane @jack @TwitterDev can we get a...), Tweet(id=1364359199795240961, text=@TwitterDev @suhemparack A Blue app going to...), Tweet(id=1364338409494503425, text=@FairyMaitre @TwitterDev tkt)])\n</code></pre>"},{"location":"usage/tweets/tweet-lookup/","title":"Tweet Lookup","text":"<p>Follow API could return information about a Tweet or group of Tweets, specified by a Tweet ID.</p> <p>Get single tweet</p> <pre><code>api.get_tweet(\"1354143047324299264\", expansions=[\"attachments.media_keys\"], media_fields=[\"type\",\"duration_ms\"])\n# Response(data=Tweet(id=1354143047324299264, text=Academics are one of the biggest groups using...))\n</code></pre> <p>Get multi tweets by one request</p> <pre><code>api.get_tweets([\"1261326399320715264\",\"1278347468690915330\"],expansions=\"author_id\",tweet_fields=[\"created_at\"], user_fields=[\"username\",\"verified\"])\n# Response(data=[Tweet(id=1261326399320715264, text=Tune in to the @MongoDB @Twitch stream...), Tweet(id=1278347468690915330, text=Good news and bad news: 2020 is half over)])\n</code></pre>"},{"location":"usage/tweets/tweet-manage/","title":"Manage Tweets","text":"<p>Creating and deleting Tweets using the Twitter API is essential for engaging with the public conversation. The new manage Tweets endpoints allow you to do just that and much more.</p> <p>We have two available methods for manage Tweets, POST and DELETE. The POST method lets you post polls, quote Tweets, Tweet with reply settings, Tweet with geo, Tweet with media and tag users, and Tweet to Super Followers, in addition to other features. Likewise, the DELETE method allows you to delete a specific Tweet. For the POST method, you can pass in the parameters you are looking for to enable you to further customize your request.</p> <p>There is a user rate limit of 200 requests per 15 minutes for the POST method. The DELETE method has a rate limit of 50 requests per 15 minutes. Additionally, there is a limit of 300 requests per 3 hours, including Tweets created with either manage Tweets or manage Retweets. </p> <p>You can get more information for this at docs</p>"},{"location":"usage/tweets/tweet-manage/#post-a-tweet","title":"Post a Tweet","text":"<pre><code>my_api.create_tweet(text=\"Hello world!\")\n# Response(data=Tweet(id=1354143047324299264, text=Hello world!))\n</code></pre>"},{"location":"usage/tweets/tweet-manage/#delete-a-tweet","title":"Delete a Tweet","text":"<pre><code>my_api.delete_tweet(tweet_id=\"1354143047324299264\")\n# {'data': {'deleted': True}}\n</code></pre>"},{"location":"usage/tweets/tweets_counts/","title":"Tweet counts","text":"<p>The tweet counts endpoints allow developers to understand and retrieve the volume of data for a given query</p> <p>There have two endpoints: <code>Recent Tweet counts</code>, <code>Full-archive Tweet counts</code>.</p>"},{"location":"usage/tweets/tweets_counts/#recent-tweet-counts","title":"Recent Tweet counts","text":"<p>The recent Tweet counts endpoint allows you to programmatically retrieve the numerical count of Tweets for a query, over the last seven days.  This endpoint is available via the standard and academic research product tracks and uses the OAuth 2.0 Bearer Token for authentication.</p> <p>You can specify a query of up to 512 characters (using the core operators available in the standard product track) and specify the granularity (which can be day, hour or minute) as well as the time period for which you need the Tweet counts (using the start_time and end_time parameters).</p> <pre><code>api.get_tweets_counts(\"twitterapi\")\n# Response(data=[TweetCount(start='2021-06-18T09:09:23.000Z', end='2021-06-18T10:00:00.000Z', tweet_count=15), TweetCount(start='2021-06-18T10:00:00.000Z', end='2021-06-18T11:00:00.000Z', tweet_count=36)...])\n</code></pre>"},{"location":"usage/tweets/tweets_counts/#full-archive-tweet-counts","title":"Full-archive Tweet counts","text":"<p>Tips</p> <p>This only for Academic Research product track</p> <p>The full-archive Tweet counts endpoint allows you to programmatically retrieve the numerical count of Tweets for a query, from the entire archive of public Tweets. Currently, this endpoint is only available in the Academic Research product track and uses the OAuth 2.0 Bearer Token for authentication.</p> <p>You can specify a query of up to 1024 characters, using both the core and advanced sets of operators (because this endpoint is available in the Academic Research product track) and specify the granularity and time period for which you need the Tweet counts, as noted above in section on recent Tweet counts. </p> <pre><code>api.get_tweets_counts(query=\"lakers\", search_type=\"all\")\n# Response(data=[TweetCount(start='2021-06-18T09:09:23.000Z', end='2021-06-18T10:00:00.000Z', tweet_count=15), TweetCount(start='2021-06-18T10:00:00.000Z', end='2021-06-18T11:00:00.000Z', tweet_count=36)...])\n</code></pre>"},{"location":"usage/usage/tweets/","title":"Tweets","text":"<p>The Usage API in the Twitter API v2 allows developers to programmatically retrieve their project usage. Using thie endpoint, developers can keep a track and monitor of the number of Tweets they have pulled for a given billing cycle.</p> <p>You can learn more about the Usage API in the docs.</p> <p>Note</p> <pre><code>The Usage API need `OAuth 2.0 App-only`.\n</code></pre>"},{"location":"usage/usage/tweets/#get-usage","title":"Get usage","text":"<p>Get the Tweet usage within the context of a project</p> <pre><code>from pytwitter import Api\n\napi = Api(bearer_token='your bearer token')\n\nresp = api.get_usage_tweets(days=10, usage_fields=[\"daily_client_app_usage\", \"daily_project_usage\"])\nprint(resp.data)\n# Usage(cap_reset_day=28, project_id='123456789', project_cap='50000000', project_usage='11910737',...)\n</code></pre>"},{"location":"usage/users/blocks/","title":"Blocks","text":"<p>The manage blocks endpoints enable you to block or unblock a specified user on behalf of an authenticated user.</p> <p>For this endpoint group, there are two methods available POST and DELETE. The POST method allows you to block a user, and the DELETE method will enable you to unblock.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/users/blocks/#blocks","title":"Blocks","text":"<p>You can block a user</p> <pre><code>my_api.block_user(user_id=my_api.auth_user_id, target_user_id=\"target user id\")\n# {'data': {'blocking': True}}\n</code></pre> <p>Unblock a user</p> <pre><code>my_api.unblock_user(user_id=my_api.auth_user_id, target_user_id=\"target user id\")\n# {'data': {'blocking': False}}\n</code></pre> <p>You can get users who are blocked by you.</p> <pre><code>my_api.get_blocking_users(my_api.auth_user_id)\n# Response(data=[User(id='1065249714214457345', name='Spaces', username='TwitterSpaces'), User(id='783214', name='Twitter', username='Twitter')])\n</code></pre>"},{"location":"usage/users/follows/","title":"Follows","text":"<p>Following users is one of the most foundational actions on Twitter. </p> <p>Twitter offer two sets of endpoint groups to help you lookup, create, and delete follow relationships: follows lookup and manage follows.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/users/follows/#follows-lookup","title":"Follows lookup","text":"<p>Get users are following by target user</p> <pre><code>api.get_following(user_id=\"2244994945\", max_results=5)\n# Response(data=[User(id='459860328', name='julie\u2728', username='JulieMendoza206'), User(id='273830767', name='\ud83c\udd3f\ud83c\udd44\ud83c\udd42\ud83c\udd37', username='rahul_pushkarna')...])\n</code></pre> <p>Get users are following the target user</p> <pre><code>api.get_followers(user_id=\"2244994945\", max_results=5)\n# Response(data=[User(id='715131097332518912', name='Daniel', username='RGIDaniel'), User(id='1176323137757048832', name='Joyce Wang', username='joycew67')...])\n</code></pre>"},{"location":"usage/users/follows/#manage-follows","title":"Manage Follows","text":"<p>Those api need user access token.</p> <p>Follow a user</p> <pre><code>my_api.follow_user(user_id=my_api.auth_user_id, target_user_id=\"target user id\")\n# {'data': {'following': True, 'pending_follow': False}}\n</code></pre> <p>Unfollow a user</p> <pre><code>my_api.unfollow_user(user_id=my_api.auth_user_id, target_user_id=\"target user id\")\n# {'data': {'following': False}}\n</code></pre>"},{"location":"usage/users/mutes/","title":"Mutes","text":"<p>The manage mute endpoints enable you to mute or unmute a specified account on behalf of an authenticated user.</p> <p>For these endpoints, there are two methods available: POST and DELETE. The POST method allows you to mute an account, and the DELETE method allows you to unmute an account. There is a user rate limit of 50 requests per 15 minutes for both the POST and DELETE endpoints.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/users/mutes/#manage-mutes","title":"Manage Mutes","text":"<p>You can mute a user</p> <pre><code>my_api.mute_user(user_id=my_api.auth_user_id, target_user_id=\"target user id\")\n# {'data': {'muting': True}}\n</code></pre> <p>Unmute a user</p> <pre><code>my_api.unmute_user(user_id=my_api.auth_user_id, target_user_id=\"target user id\")\n# {'data': {'muting': False}}\n</code></pre>"},{"location":"usage/users/mutes/#get-mutes","title":"Get mutes","text":"<p>Get user muting</p> <pre><code>my_api.get_user_muting(my_api.auth_user_id)\n# Response(data=[User(id='id', name='xxx', username='xxx')])\n</code></pre>"},{"location":"usage/users/search/","title":"Search","text":"<p>The Users Search endpoint provides a simple, relevance-based search interface to public user accounts on X. Try querying by topical interest, full name, company name, location, or other criteria.</p> <p>You can get more information for this at docs</p>"},{"location":"usage/users/search/#search-users","title":"Search Users","text":"<p>Get users that match a search query.</p> <pre><code>my_api.search_users(query=\"developers\")\n# Response(data=[User(id='866707894389141505', name='Refinitiv Developers', username='Developers'), User(id='2244994945', name='Developers', username='XDevelopers')])\n</code></pre>"},{"location":"usage/users/user-lookup/","title":"Users Lookup","text":"<p>Twitter allow app to lookup users. You can get more information at Lookup docs.</p> <p>If you have the username or ID for user(s) which you want to get data. You can use follows methods:</p> <p>Get multiple users by one requests</p> <pre><code># Get by ids\napi.get_users(ids=[\"783214\", \"2244994945\"])\n# Response(data=[User(id='2244994945', name='Twitter Dev', username='TwitterDev'), User(id='783214', name='Twitter', username='Twitter')])\n\n# Get by usernames\napi.get_users(usernames=\"Twitter,TwitterDev\")\n# Response(data=[User(id='2244994945', name='Twitter Dev', username='TwitterDev'), User(id='783214', name='Twitter', username='Twitter')])\n</code></pre> <p>Get one user:</p> <pre><code># By id\napi.get_user(user_id=\"783214\")\n# Response(data=User(id='783214', name='Twitter', username='Twitter'))\n\n# By username\napi.get_user(username=\"Twitter\")\n# Response(data=User(id='783214', name='Twitter', username='Twitter'))\n</code></pre>"}]}